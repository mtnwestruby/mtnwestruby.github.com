---
- name: Akira Matsuda
  avatar: https://avatars.githubusercontent.com/amatsuda
  github: amatsuda
  twitter: a_matsuda
  title: Something Amazing
  description: We don't know what he's talking on yet, but it will be amazing.
  biography: Akira is coming all the way from Japan to speak.
- name: Ernie Miller
  avatar: https://avatars.githubusercontent.com/ernie
  github: ernie
  twitter: erniemiller
  title: Humane Development
  description: |-
    Agile. Scrum. Kanban. Waterfall. TDD. BDD. OOP. FP. AOP. WTH?

    As a software developer, I can adopt methodologies so that I feel there's a sense of order in the world.

    There's a problem with this story: We are humans, developing software with humans, to benefit humans. And humans are *messy*.

    We wrap ourselves in process, trying to trade people for personas, points, planning poker, and the promise of predictability. Only people aren't objects to be abstracted away. Let's take some time to think through the tradeoffs we're making together.
  biography: |-
    I've been programming since I was 6, and professionally for the past 16 years or so. I'm passionate about creating things, and see software development as an especially powerful medium for creation. Sometimes I still can't believe that people actually *pay us* to have this much fun.

    I'm currently the Director of Engineering at nVisium.
- name: Ryan Davis
  avatar: https://avatars.githubusercontent.com/zenspider
  title: Standing on the Shoulders of Giants
  twitter: the_zenspider
  github: zenspider
  description: |-
    Ruby is a fantastic language, but it could be better. While it has done a terrific job of taking ideas from languages like smalltalk, lisp, and (to an extent) perl, it hasn't done nearly enough of it.

    Big thinkers like Alan Kay & Dan Ingalls (smalltalk), David Ungar (self), Guy Steele & Gerald Sussman (scheme), and Matthias Felleisen (racket) have paved the way for so many programming language ideas that we should plunder the treasures that they've thought up. You might not know their names, but you've certainly used their technology.

    I will survey a vast minority of these ideas and how they could help ruby. Ideas including: self-bootstrapping implementations and extensive collection and magnitude hierarchies from smalltalk, instance-based inheritance and JIT compilation from self, TCO and the overarching importance of lambdas from racket/scheme, and finally object level pattern matching and the combined object/lambda architecture from the View Points Research Institute.

    Ruby is at its best when borrowing great ideas from other languages, but lately it has fallen behind in this. It's time for ruby to step up and do more with these ideas, to keep pushing forward, to stand upon the shoulders of giants.
  biography: |-
    Ryan Davis has been using Ruby since 2000 and is a founding member of the Seattle Ruby Brigade, the first and foremost ruby brigade in the world.

    In ruby land, he has focused on developer productivity and test automation tools. Some of his projects match:

    /ruby2(ruby|smalltalk|c)|zen(test|web|profiler)|fl(og|ay)|yoda|rails-enterprise|image_science|h(o|eckl)e|minitest(-(bacon(-cheeseburger)?|macruby|excludes|focus|(cheeseburg|debugg)er))?|makerakeworkwell/i

    Three (now two) of those matches are a lie.
- name: Jamis Buck
  avatar: https://avatars.githubusercontent.com/jamis
  github: jamis
  twitter: jamis
  title: Twisty Little Passages
  description: |-
    A live coding session. Real maze algorithms. 3D surfaces. Animations, first-person fly-throughs of spherical and toroidal mazes. Hexagons, octagons, and regular tilings. Mazes in shapes you never even dreamed of.

    Coloring techniques. Rendering techniques. Visualization. HOLY MOTHER OF THESEUS! This is going to be so hot.

    But bring a seat belt, because it's going to move really, really fast. Don't blink or you'll miss something awesome. Maybe bring some eye drops, too, because your eyes will get really dry from all that NOT BLINKING.

    Think I'm joking? Show up and call my bluff.
  biography: Jamis Buck once wrote a series of articles about maze algorithms, and
    is currently writing a full-blown book about them. He knows a few things about
    mazes and how to generate them, and like any good magician, has a trick or two
    up his sleeve. Unlike most magicians, though, he's eager to share his secrets...
- name: Ben Eggett
  avatar: https://avatars.githubusercontent.com/beneggett
  github: beneggett
  twitter: beneggett
  title: 'Writing Music with Ruby: A subtle introduction to music theory'
  description: "I want to teach you a bit about music theory and how to write music,
    using ruby. I'll also walk you through some principles of audio engineering along
    the way.\n\nI'll teach you how to write notes, octaves, chromatic scales, major
    scales, minor scales, modes, thirds, chords, chord scales, chord progressions
    and more.\n\nRather than keep talking, I've decided to give you a brief sample
    of my presentation: \n\nhttp://youtu.be/FRxMhBsqXys\n\nIf you are short on time,\n\nBuilding
    a sound wave & note starts around :45\nVisualization of the note audio wave starts
    around 2:40\nDemos of notes, scales, chords, etc, start around 4:00"
  biography: "Ben has extensive experience working in various fields of web development,
    design, systems architecture, marketing and business development. Over the past
    decade, Ben has worked on over 140 projects as developer, designer, project manager
    or a combination. In addition to the many programming languages Ben works with,
    he is fluent in Japanese, Spanish, English and proficient in Portuguese. Ben organizes
    the Downtown Ruby User Group (DRUG) in Salt Lake City, UT. Ben has a passion for
    education and has taught & developed curriculum for bootcamps on web development
    with a focus on Ruby on Rails. \n"
- name: Randy Coulman
  avatar: https://avatars.githubusercontent.com/randycoulman
  github: randycoulman
  twitter: randycoulman
  title: Solving Ricochet Robots
  description: |
    Ricochet Robots is a puzzle board game for any number of players.  While being a very fun game to play with some fascinating properties, it is also interesting to think about writing a program to play the game.

    Let's discuss a computerized player for Ricochet Robots that finds the optimal solution to any board in a reasonable amount of time.  Along the way, we'll learn about graph search techniques, data representation, algorithms, heuristics, pruning, and optimization.
  biography: |
    Randy Coulman is a Senior Software Engineer at Zeal (@CodingZeal), an agile web development consultancy in Oregon. He's been developing software for more nearly 25 years, mainly in Ruby, Smalltalk, Javascript, and C++. He writes about software on his Courageous Software blog at http://randycoulman.com/blog/.
- name: Aja Hammerly
  avatar: https://avatars.githubusercontent.com/thagomizer
  github: thagomizer
  twitter: thagomizer_rb
  title: Forensic Log Analysis with BigQuery
  description: "It is a fact of life: When you are running a website stuff goes wrong.
    Someone puts a dictionary on the keyboard and reloads your site a million times.
    Your mobile app hits an error state and sends messages that cause 500s on your
    server. An external service takes 5 times as long as normal to respond to a request.
    \n\nWhen responding to problems logs are frequently our go to for investigating
    events but plain logs aren't user friendly or efficient. Using BigQuery for log
    investigation lets you use familiar tools like SQL to dig into your logs, extract
    the interesting data, and even make charts of the data. "
  biography: |
    Aja lives in Seattle where she is a Developer Advocate at Google and a member of the Seattle Ruby Brigade. Her favorite languages are Ruby and Prolog. Her time carrying a pager makes her passionate about handling problems with simple tools. In her free time she enjoys skiing, knitting, and long coding sessions on the beach.
- name: Joe Mastey
  avatar: https://avatars.githubusercontent.com/jmmastey
  github: jmmastey
  twitter: jmmastey
  title: Building a Culture of Learning
  description: Research shows that opportunities for learning and career growth within
    a company are hugely important for employee retention and engagement. We also
    know that in the software world our tools become obsolete every few years. And
    yet even the most enlightened employers leave it to their engineers to learn in
    their free time. We'll discuss some relevant issues and approaches to the problem
    with an eye towards changes that work in the real, deadline-driven world of software
    development. We'll also talk about several things that have or haven't worked
    in my experience trying to build a culture of learning in a regulated financial
    services company. For example, a company that's hesitant to delay critical projects
    for formal training may be fine with lunchtime workshops. Participants should
    walk away equipped to start building momentum at any level in their organization
    towards constant learning and improvement.
  biography: Joe Mastey has been a software engineer for the last twelve years. In
    that time he's worked with the public sector, big business, consulting and with
    startups. His current gig is as the Manager of Internal Learning for Enova International.
    His job is broadly to make all the engineers at Enova great at their jobs; coordinating,
    teaching, speaking and leading as needs dictate. This variety and view gives him
    hard won experience dealing with the issues that face developed engineering teams
- name: Mary Elizabeth Cutrali and Danny Glunz
  avatar: https://avatars.githubusercontent.com/maryelizbeth
  github: maryelizbeth
  twitter: marycutrali
  title: Meaningful Mentorship for Developers
  description: |
    "The delicate balance of mentoring someone is not creating them in your own image, but giving them the opportunity to create themselves." - Steven Spielberg

    In our world of never ending Stack Overflow answers and Github code reviews, there still remains some knowledge that can only be found through experience. Mentoring relationships are an indispensable part of any developer’s career and allow for experiential knowledge transfer. Programming, as a culture, has an underdeveloped network of mentors. As a community, we need to turn mentorship from a wishful yearly resolution into a cultural reality.

    We’ll use research from scholars like Kathy Kram and historical examples of mentor-protege pairs (think: Larry Page/Marissa Mayer ), to get to the bottom of what makes a successful pair tick. Finally, we’ll share some of our experience in putting this research into action so that you may join us in discovering what it takes to cultivate a meaningful mentorship.
  biography: "Mary Elizabeth is a Ruby lady at Paperless Post in New York City, where
    she writes the code to magically fold your cards and stamp your envelopes. Beyond
    stationery, Mary Elizabeth’s interests include email (someone has to love it),
    garbage collection, teaching & mentoring new devs, outer space, doing yoga & smiling
    at dogs.  \n\nDanny Glunz didn’t merely adopt the internet, he was born on it,
    moulded by it. He has spent a good portion of his life abroad so he pretends to
    be cultured by spelling in the Queen’s English. He recently dropped out of an
    undergrad in CS to work for Rally Software, where he recently quit to continue
    learning at turing.io. What some people would call “commitment issues”, he calls
    a healthy appetite for knowledge and experience.\n\nTogether, Mary Elizabeth &
    Danny are a mentor-protege pair from Turing School. Mary is also a graduate of
    Hungry Academy (2012). \n"
- name: Paul Hinze
  avatar: https://avatars.githubusercontent.com/phinze
  github: phinze
  twitter: phinze
  title: 'Smoke & Mirrors: The Primitives of High Availability'
  description: |-
    Many of the greatest achievements in the history of computers are based on lies, or rather, the strategic sets of lies we generallly call "abstraction".  Operating systems lie to programs about hardware, multitasking systems lie to users about parallelism, Ruby lies to us about how easy it is to tell a CPU what to do... the list goes on and on.

    One of the primary "strategic lies" of the internet is the presentation of each service as though it were a discrete, cohesive entity. When we use GitHub, we think of it as just "GitHub", not a swarm of networked computers. This lie gives us the opportunity to build high availability applications: apps designed to _never go down_.

    Let's take a tour through the amazing stack of tools that helps us construct high availability applications. We'll review some of the incredible technology underlying the internet: things like TCP, BGP, and DNS. Then we'll talk about how these primitives combine into useful patterns at the application level. I hope you'll leave with not only a renewed appreciation for the core innovations of the internet, but also some practical working knowledge of how to go about building and running a zero-downtime application.
  biography: |
    Once a humble Rubyist, Paul Hinze has consistently been drawn to Production: its affinity for chaos, its unforgiving nature, and ultimately its deep longing for attention. Paul first felt the Call of Production at Braintree, where he eventually found himself in charge of ops.

    Paul, in his hubris, believed that when he started working at Instructure he could forget about Production. But it was not long before he started hanging out with the ops team again and working on automation and deployment tools.

    Today Paul has finally embraced his true nature at HashiCorp, where he works on tools that help others who, like him, feel The Call.
- name: Barrett Clark
  avatar: https://avatars.githubusercontent.com/barrettclark
  github: barrettclark
  twitter: barrettclark
  title: '"Good Enough"'
  description: |-
    As a programmer, work-life balance has always been a tricky thing for me.  Steve Wozniak commented that “you can’t stop the steamroller of technology change.”  That notion has been applied to software.  If you rest you risk being squished.

    I wrestle with impostor syndrome, and maybe this is just an extension of that.  As a rubyist it’s difficult to keep up.  Everything evolves quickly (ruby, rails, gems, related technologies, methodologies).  I consider myself a full stack developer, and a stubborn one at that.  I’ve fought with a Makefile for weeks just to get some package to compile on some *nix variant.

    We are paid for our ability to solve problems.  It requires a lot of practice.  I've learned to be ok with not knowing how to do things, but I still "hear the footsteps."  I don’t really know what it means to be “good enough” yet, but this talk will explore those lines between work/life balance and how we keep our edge on the job while being present in the moments off the job.
  biography: I am a Rubyist turned polyglot. I currently work at Sabre Labs, where
    we experiment with the intersection of emerging and current technologies. I've
    done a lot of work with mapping, geolocation, indoor location, and proximity (beacons).
    I don't always write code in Ruby, but when I do I prefer to write backend servers
    and services.
- name: Coraline Ehmke
  avatar: https://avatars.githubusercontent.com/coralineada
  github: coralineada
  twitter: CoralineAda
  title: Data-Driven Refactoring
  description: There are dozens of code metrics tools available to Rubyists, all eager
    to judge our codebases and tell us things that we probably already know. But when
    technical debt is piled high and feature friction really sets in, we need more
    than to know that our User class has a "D" grade. How can we use tools and tests
    to help us formulate a refactoring plan that amounts to more than just rearranging
    bricks in a crumbling building? Let's explore some of the more interesting code
    analysis tools, take a look at our testing techniques, and find novel ways to
    combine them into a meaningful refactoring strategy.
  biography: Coraline Ada Ehmke is a speaker, author, teacher, open source advocate
    and technologist with 20 years of experience in developing apps for the web. As
    a founding member of LGBTech.org, CultureOffset.org, and OpenSourceForWomen.org,
    she works diligently to promote diversity and inclusivity in the tech industry.
    Her current interests include small-application ecosystems, APIs, business intelligence,
    machine learning, and predictive analytics.
- name: Brian Knapp
  avatar: https://avatars.githubusercontent.com/brianknapp
  github: brianknapp
  twitter: _brianknapp
  title: Message Oriented Programming
  description: |-
    "I'm sorry that I long ago coined the term "objects" for this topic because it gets many people to focus on the lesser idea. The big idea is "messaging" - that is what the kernal of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)." - Alan Kay

    Object oriented programming is what gets a lot of attention, and it is often set in opposition to functional programming. However, it seems that OOP with its focus on classes, inheritence, and polymorphism missed what Alan Kay was really working on - messaging systems.

    In this talk we will examine the fundamental pieces to what I am calling message oriented programming. We will look at the request/response message pattern, we will look at the structure of messages themselves, and we will look at how protocols can be created to enforce a sane message passing system.

    We will also look at how this fits with Ruby, OOP, FP, and modern distributed computing patterns like REST, SOA and microservices. They are all related an it's clear that message oriented programming has a place in the programmer's toolbox. In fact, we are already using message oriented program to power modern applications, we just don't know it yet.
  biography: 'I am a Ruby developer and I created Obvious (http://retromocha.com/obvious/),
    a clean architecture based on Robert "Uncle Bob" Martin''s work on clean architecture.  Beyond
    that, I also created The Ruby Web Benchmark Report (http://www.madebymarket.com/blog/dev/ruby-web-benchmark-report.html),
    which is the most comprehensive comparison of ruby web servers, frameworks, and
    runtimes on the internet. '
- name: Michael Ries
  avatar: https://avatars.githubusercontent.com/mmmries
  github: mmmries
  twitter: mmmries
  title: Conventions Between Applications
  description: |-
    Rails gives us great conventions for building an application, but what conventions should we use when we are building a whole system that encompasses multiple applications? How should we name things? What abstraction layers should we enforce?

    The MX team has been building a distributed system composed of Rails applications for the last 3 years. We'll talk about failed ideas, conventions that have stood the test of time and some experiments that are underway.
  biography: I organize UV.rb, make robots, constantly experiment with new programming
    ideas and work with an amazing team at MX.
- name: John Paul Ashenfelter
  avatar: https://avatars.githubusercontent.com/johnpaulashenfelter
  github: johnpaulashenfelter
  twitter: johnashenfelter
  title: Learning Statistics Will Save Your Life
  description: Zed Shaw famously promised to kill progammers who didn't learn statistics.
    I intend to save your life by teaching you just enough statistics to plan and
    improve your A/B tests, understand your performance metrics, and use good data
    to make important decisions. We'll cover the basics of descriptive statistics,
    bust common myths, simulate the real world with code, address uncertainty using
    Bayesian statistics, and answer questions both inane and insane with Fermi estimation.
    Save your life and make better decisions by spending this session learning statistics.
  biography: John Paul is a long-time software developer, former chemist, and life-long
    computer geek. He met Ruby in 2006 throught their mutual friend, Rails, and they've
    been together ever since. After years of startups, online education projects,
    and consulting for earth-friendly small businesses, he ended up at BigCartel because
    he believes in the artist. Home is the Shenandoah Valley of Virginia.
- name: Matthew Clark
  avatar: https://avatars.githubusercontent.com/winescout
  github: winescout
  twitter: winescout
  title: The How and Why of Ruby
  description: Ruby might be one of the easier languages for learning programming,
    but that doesn’t mean it holds the programmers hand in any way, or is somehow
    easy. Exactly the opposite. Ruby is flexible enough to allow coders to do just
    about anything the like, for better or worse. So why is it the language of choice
    at the coding bootcamps springing up across the country, when it allows new programmers
    to get into so much trouble? Are we doing these young programmers a disservice
    by teaching Ruby simply because we love our deliciously readable and expressive
    examples, or are we tapping into something better for students, an enlightened
    path that is more likely to propel them up and over the steeper learning curve
    Ruby demands? With Ruby, students are thrown into the deep end of a culture that
    believes strongly why we do things one way rather than another. There is a common
    goal to make the right way to do things also the easiest way. Collaboration is
    the norm, which is the best way to learn. I could go on, and I will, in the talk.
    I’ll expand on why Ruby is great as a first language because we are great as a
    community. We demand so much more from our junior programmers because the tooling
    is so good and the language is so approachable that students grasp advanced concepts
    much sooner on the path. We hold juniors to higher levels of quality, testing,
    and readability and they are better developers in the long run for it. Ruby is
    a great first language because discussions of the ‘how’ quickly give way to the
    ‘why’, and junior developers get it, and they don’t stay junior developers for
    long.
  biography: Last May, my partner at Notch8 and I grew our company from the 2 of us
    to 6 by hiring 4 junior developers, fresh out of code Bootcamp.  People thought
    we were nuts.  We thought we were nuts, but it worked, and our clients continue
    to love working with us.  I've thought a lot about why the leveled up so quickly,
    and want to share that with you all.
- name: Starr Horne
  avatar: https://avatars.githubusercontent.com/starrhorne
  github: starrhorne
  twitter: StarrHorne
  title: SVG charts and graphics with Ruby
  description: |
    Many people assume that the only way to add interesting charts and visualizations to their web applications is via JavaScript. But this isn't true. You don't need a 900 kB JavaScript library to generate simple charts. Instead you can use SVG and Ruby.

    Once you learn how to build your own SVG graphics then it's possible to do cool things like cache them, or use your own CSS and JavaScript to manipulate them. This presentation will show you how.
  biography: Starr Horne is a Rubyist and Chief Javascripter at Honeybadger.io. When
    he's not neck-deep in other people's bugs, he enjoys making furniture with traditional
    hand-tools, reading history and brewing beer in his garage in Seattle.
- name: Jeremy Evans
  avatar: https://avatars.githubusercontent.com/jeremyevans
  github: jeremyevans
  twitter: jeremyevans0
  title: Better Routing Through Trees
  description: |-
    This presentation will describe an approach to routing web requests efficiently through the use of a routing tree.  A routing tree usually routes requests by looking at the first segment in request path, and sending it to the routing tree branch that handles that segment, repeating until the entire path is processed.

    At any point while handling a request, the routing tree can operate on the request, for things like enforcing access control or object retrieval from a database, where such behavior is common for the entire branch.  In addition to considering the request path, a routing tree also usually considers the request method, and may consider information from the request headers or request body when deciding how to route a request.

    A routing tree's request handling is similar to how a file system processes requests for files, where it looks at the first segment of the path, sees if it is a directory, and if so, looks for the rest of the path inside that directory.

    This presentation will describe what makes routing requests using a routing tree faster and simpler than the routing approaches used by the popular ruby web frameworks.
  biography: Jeremy Evans is the lead developer of the ruby Sequel database library,
    as well as many other ruby libraries.  He has contributed to all three major ruby
    implementations, as well as many popular ruby libraries. He is the maintainer
    of ruby ports for the OpenBSD operating system.
- name: John Crepezzi
  avatar: https://avatars.githubusercontent.com/seejohnrun
  github: seejohnrun
  twitter: seejohnrun
  title: On Memory
  description: Ruby doesn't require developers to manage memory.  It definitely makes
    our work less frustrating, but losing sight of the memory implications of our
    code, will get us into trouble!  In this talk, I'll go over common (and less common)
    memory pitfalls, why they work the way they do, and how to avoid them.
  biography: |-
    John is a developer at Genius in New York.  He is the author of several popular Ruby gems including `ice_cube`, `easy_translate` and `gotcha`.  He is also the creator of the open source pastebin software `hastebin`.  He enjoys speaking and blogging about code, learning new things, and writing great software.

    https://github.com/seejohnrun
    http://johncrepezzi.com
- name: Justin Campbell
  avatar: https://avatars.githubusercontent.com/justincampbell
  github: justincampbell
  twitter: justincampbell
  title: Make up your own "Hello, World!"
  description: |-
    We all love Ruby. Maybe we've only been paid to write code in Ruby (and maybe JavaScript). But there are so many other languages out there, and they all have strengths, weaknesses, and very different communities surrounding them.

    Let's talk about language exploration. We'll discuss how to learn a new language, considerations when introducing things to production, and come up with some ideas for Ruby and it's ecosystem. Plan on dipping your toes in Elixir, Go, Haskell, Rust, and Scala during the session.
  biography: Justin is an experienced Ruby developer with a passion for automation
    and software craftsmanship. He'll tell you he's from Philly, but he lives over
    the river in New Jersey.
